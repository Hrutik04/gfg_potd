Question : 

Given a singly linked list having n nodes containing english alphabets ('a'-'z'). Rearrange the linked list in such a way that all the vowels come before the consonants while maintaining the order of their arrival. 

Example 1:

Input:
n = 9
linked list: a -> b -> c -> d -> e -> f -> g -> h -> i 
Output: 
a -> e -> i -> b -> c -> d -> f -> g -> h
Explanation: 
After rearranging the input linked list according to the condition the resultant linked list will be as shown in output.
Example 2:

Input:
n = 8
linked list: a -> b -> a -> b -> d -> e -> e -> d 
Output: 
a -> a -> e -> e -> b -> b -> d -> d
Explanation: 
After rearranging the input linked list according to the condition the resultant linked list will be as shown in output.
Your Task:
Your task is to complete the function arrangeCV(), which takes head of linked list and arranges the list in such a way that all the vowels come before the consonants while maintaining the order of their arrival and returns the head of the updated linked list.

Expected Time Complexity :  O(n)
Expected Auxiliary Space :  O(1)

Constraints:
1 <= n <= 104
'a' <= elements of linked list <= 'z'


Solution :

class Solution {
  public:
    // task is to complete this function
    // function should return head to the list after making
    // necessary arrangements
    struct Node* arrangeCV(Node* head) {
         if (!head || !head->next) // If the list is empty or has only one node, no rearrangement needed
            return head;

        Node *vowelHead = nullptr, *vowelTail = nullptr; // Pointers for vowel sublist
        Node *consonantHead = nullptr, *consonantTail = nullptr; // Pointers for consonant sublist

        // Traverse the original list and categorize nodes into vowel and consonant sublists
        Node* curr = head;
        while (curr) {
            if (isVowel(curr->data)) {
                if (!vowelHead) {
                    vowelHead = curr;
                    vowelTail = curr;
                } else {
                    vowelTail->next = curr;
                    vowelTail = vowelTail->next;
                }
            } else {
                if (!consonantHead) {
                    consonantHead = curr;
                    consonantTail = curr;
                } else {
                    consonantTail->next = curr;
                    consonantTail = consonantTail->next;
                }
            }
            curr = curr->next;
        }

        // If there are no vowels, return the original list
        if (!vowelHead)
            return head;

        // Merge the vowel and consonant sublists
        vowelTail->next = consonantHead;
        consonantTail->next = nullptr;

        return vowelHead;
    }

private:
    // Function to check if a character is a vowel
    bool isVowel(char c) {
        return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');
    
    }
};