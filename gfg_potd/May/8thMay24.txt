Question :

Root to Leaf Paths

Given a Binary Tree of nodes, you need to find all the possible paths from the root node to all the leaf nodes of the binary tree.

Example 1:

Input:
       1
    /     \
   2       3
Output: 
1 2 
1 3 
Explanation: 
All possible paths:
1->2
1->3

Example 2:

Input:
         10
       /    \
      20    30
     /  \
    40   60
Output: 
10 20 40 
10 20 60 
10 30 
Your Task:
Your task is to complete the function Paths() which takes the root node as an argument and returns all the possible paths. (All the paths are printed in new lines by the driver's code.)

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(height of the tree)

Constraints:
1<=n<=104



Solution :

using a depth-first search (DFS) approach.
This implementation maintains a current path vector (currentPath) while traversing the tree. Whenever a leaf node is encountered, the current path is added to the allPaths vector. After visiting a node and its subtrees, the current node is removed from the current path to backtrack and explore other paths.

/*

Definition for Binary Tree Node
struct Node
{
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x){
        data = x;
        left = right = NULL;
    }
};
*/

class Solution {
  public:
  
    void findPaths(Node* node, vector<int>& currentPath, vector<vector<int>>& allPaths) {
        // Base case: if node is null, return
        if (node == nullptr) 
            return;

        // Add current node to the current path
        currentPath.push_back(node->data);

        // If it's a leaf node, add current path to allPaths
        if (node->left == nullptr && node->right == nullptr) {
            allPaths.push_back(currentPath);
        }

        // Recursive calls for left and right subtrees
        findPaths(node->left, currentPath, allPaths);
        findPaths(node->right, currentPath, allPaths);

        // Remove the current node from the current path
        currentPath.pop_back();
    }
    
    vector<vector<int>> Paths(Node* root) {
        // code here
        vector<vector<int>> allPaths;
        vector<int> currentPath;

        findPaths(root, currentPath, allPaths);

        return allPaths;
    }
        
    
};

