/*

Square root of a number

Given an integer n, find the square root of n. If n is not a perfect square, then return the floor value.

Floor value of any number is the greatest Integer which is less than or equal to that number

Examples:

Input: n = 5
Output: 2
Explanation: Since, 5 is not a perfect square, floor of square_root of 5 is 2.
Input: n = 4
Output: 2
Explanation: Since, 4 is a perfect square, so its square root is 2.
Expected Time Complexity: O(logn)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ n ≤ 107

*/



class Solution {
  public:
    long long int floorSqrt(long long int n) {
           if(n==0) return n;
        
        long long l=1,r=n;
        long long ans=-1;
        while(l<=r){
            long long mid=l+(r-l)/2;
            
            if(mid*mid==n) {
                ans=mid;
                break; 
            }
            
            else if(mid*mid>n){
                r=mid-1;
            }
            
            else{
                ans=mid; // as product of  sqrt of any number with itself is always smaller than the number , we can store that mid for the time being
                l=mid+1;
            }
        }
        
        return ans;
    }

};