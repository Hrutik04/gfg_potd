/*

Add 1 to a Linked List Number

You are given a linked list where each element in the list is a node and have an integer data. You need to add 1 to the number formed by concatinating all the list node numbers together and return the head of the modified linked list. 

Note: The head represents the first element of the given array.

Examples :

Input: LinkedList: 4->5->6
Output: 457

Explanation: 4->5->6 represents 456 and when 1 is added it becomes 457. 
Input: LinkedList: 1->2->3
Output: 124
 
Explanation:  1->2->3 represents 123 and when 1 is added it becomes 124. 
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 <= len(list) <= 105
0 <= list[i] <= 105

*/



class Solution {
  public:
    void solve(Node* head, int& remain) {
        if(head == NULL) {
            return;
        }
        solve(head -> next, remain);
        int new_val = head -> data + remain;
        head -> data = new_val%10;
        remain = new_val/10;
    }
    Node* addOne(Node* head) {
        int remain = 1;
        solve(head, remain);
        if(remain == 1) {
            Node* one = new Node(remain);
            one -> next = head;
            return one;
        }
        
        return head; 
    }
};