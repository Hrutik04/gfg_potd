Question :

Construct Binary Tree from Inorder and Postorder

Given inorder and postorder traversals of a binary tree(having n nodes) in the arrays in[] and post[] respectively. The task is to construct a binary tree from these traversals.
Driver code will print the preorder traversal of the constructed tree.

Example 1:
Input:
n = 8
in[] = {4, 8, 2, 5, 1, 6, 3, 7}
post[] = {8, 4, 5, 2, 6, 7, 3, 1}
Output: 
1 2 4 8 5 3 6 7
Explanation: 
For the given postorder and inorder traversal of tree the  resultant binary tree will be
          1
       /      \
     2        3
   /  \      /  \
  4   5    6   7
   \
    8

Example 2:
Input:
n = 5
in[] = {9, 5, 2, 3, 4}
post[] = {5, 9, 3, 4, 2}
Output: 
2 9 5 4 3
Explanation:  
The  resultant binary tree will be
           2
        /     \
       9      4
        \     /
         5   3

Your Task:
You do not need to read input or print anything. Complete the function buildTree() which takes the inorder, postorder traversals and the number of nodes in the tree as input parameters and returns the root node of the newly constructed Binary Tree.

Expected Time Complexity: O(n2)
Expected Auxiliary Space: O(n)

Constraints:
1 <= n <= 103
1 <= in[i], post[i] <= 106


Solution :

class Solution
{
    public:
    
    //Function to return a tree created from postorder and inoreder traversals.
     Node *buildTreeHelper(int in[], int post[], int inStart, int inEnd, int &postIndex, unordered_map<int, int> &mp) {
        if (inStart > inEnd)
            return nullptr;

        // Create the current root node.
        Node *root = new Node(post[postIndex--]);

        // If this node has no children, return it.
        if (inStart == inEnd)
            return root;

        // Find the index of this node in the inorder traversal.
        int inIndex = mp[root->data];

        // Recursively build the right subtree.
        root->right = buildTreeHelper(in, post, inIndex + 1, inEnd, postIndex, mp);

        // Recursively build the left subtree.
        root->left = buildTreeHelper(in, post, inStart, inIndex - 1, postIndex, mp);

        return root;
    }

    
    Node *buildTree(int in[], int post[], int n) {
        // Your code here
        unordered_map<int, int> mp;

        // Store indices of inorder traversal elements.
        for (int i = 0; i < n; ++i)
            mp[in[i]] = i;

        int postIndex = n - 1; // Start from the last index of postorder array.
        return buildTreeHelper(in, post, 0, n - 1, postIndex, mp);
    }
};