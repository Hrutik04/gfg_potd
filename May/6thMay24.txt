Question :

Print all nodes that don't have sibling

Given a Binary Tree of n nodes, find all the nodes that don't have any siblings. You need to return a list of integers containing all the nodes that don't have a sibling in sorted order (Increasing).
Two nodes are said to be siblings if they are present at the same level, and their parents are the same.

Note: The root node can not have a sibling so it cannot be included in our answer.

Example 1:

Input :
       37
      /   
    20
    /     
  113 

Output: 
20 113
Explanation: 
Nodes 20 and 113 dont have any siblings.

Example 2:

Input :
       1
      / \
     2   3 

Output: 
-1
Explanation: 
Every node has a sibling.
Your Task:  
You don't need to read input or print anything. Complete the function noSibling() which takes the root of the tree as input parameter and returns a list of integers containing all the nodes that don't have a sibling in sorted order. If all nodes have a sibling, then the returning list should contain only one element -1.

Expected Time Complexity: O(nlogn)
Expected Auxiliary Space: O(Height of the tree)

Constraints:
1 ≤ n ≤ 104



Solution :

The approach used is a level order traversal (BFS) of the binary tree.
The time complexity is O(n * log n), where n is the number of nodes in the binary tree.

vector<int> noSibling(Node* node)
{
    // code here
     vector<int> result;

    // Base case: If the node is NULL, return empty result
    if (node == nullptr) return result;

    // Queue for level order traversal
    queue<Node*> q;
    q.push(node);

    while (!q.empty()) {
        Node* curr = q.front();
        q.pop();

        // Check if the current node has only one child
        if ((curr->left && !curr->right) || (!curr->left && curr->right)) {
            if (curr->left) result.push_back(curr->left->data);
            if (curr->right) result.push_back(curr->right->data);
        }

        // Push left and right children to the queue
        if (curr->left) q.push(curr->left);
        if (curr->right) q.push(curr->right);
    }

    // Sort the result in increasing order
    sort(result.begin(), result.end());

    // If all nodes have siblings, return -1
    if (result.empty()) {
        result.push_back(-1);
    }

    return result;
 
}