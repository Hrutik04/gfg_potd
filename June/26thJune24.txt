/*

Coverage of all Zeros in a Binary Matrix

Given a binary matrix contains 0s and 1s only, we need to find the sum of coverage of all zeros of the matrix where coverage for a particular 0 is defined as a total number of ones around a zero in left, right, up and bottom directions.

Examples:

Input:
matrix = [[0, 1, 0],
          [0, 1, 1],
          [0, 0, 0]]
Output: 6
Explanation: There are a total of 6 coverage are there

Input: 
matrix = [[0, 1]]
Output: 1
Explanation: There are only 1 coverage.
Expected Time Complexity: O(n * m)
Expected Space Complexity: O(1)

Constraints:
1 <= matrix.size, matrix[0].size <= 100

*/



class Solution {
  public:
    int findCoverage(vector<vector<int>>& matrix) {
        int row = matrix.size();
        int col = matrix[0].size();
        int sum = 0;
        
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                if(matrix[i][j] == 1) continue;
                
                if(i != 0) sum += matrix[i - 1][j];
                if(j != 0) sum += matrix[i][j - 1];
                if(i != row - 1) sum += matrix[i + 1][j];
                if(j != col - 1) sum += matrix[i][j + 1];
            }
        }
        return sum;
    }
};