/*

Count Smaller elements

Given an array arr containing non-negative integers. Count and return an array ans where ans[i] denotes the number of smaller elements on right side of arr[i].

Examples:

Input: arr[] = [12, 1, 2, 3, 0, 11, 4]
Output: [6, 1, 1, 1, 0, 1, 0]
Explanation: There are 6 smaller elements right after 12. There is 1 smaller element right after 1. And so on.
Input: arr[] = [1, 2, 3, 4, 5]
Output: [0, 0, 0, 0, 0]
Explanation: There are 0 smaller elements right after 1. There are 0 smaller elements right after 2. And so on.
Expected Time Complexity: O(n*logn)
Expected Auxiliary Space: O(n)

Constraints:
1 ≤ arr.size() ≤ 106
0 ≤ arr[i]  ≤ 108

*/


class Solution {
  public:
     vector<int> bits;
    void update(int i){
        for(;i<bits.size();i+=(i&(-i))){
            bits[i] += 1;
        }
    }
    int sum(int i){
        int total = 0;
        for(;i>0;i-=(i&(-i))){
            total += bits[i];
        }
        return total;
    }
    vector<int> constructLowerArray(vector<int> &arr) {
        // code here
        map<int,int> mp;
        bits.resize(arr.size()+3,0);
        for(int& val : arr) mp[val] = 0;
        int count = 1;
        for(auto& pt : mp) pt.second = count++;
        for(int& val : arr)
            val = mp[val];
        int n = arr.size();
        vector<int> soln(n);
        for(int i=n-1;i>=0;i--){
            soln[i] = sum(arr[i]-1); 
            update(arr[i]);
        }
        return soln;    
     
    }
};
