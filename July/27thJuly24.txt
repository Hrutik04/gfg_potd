/*

Form a palindrome

Given a string, find the minimum number of characters to be inserted to convert it to a palindrome.

Examples :

Input: str = "abcd"
Output: 3
Explanation: Inserted character marked with bold characters in dcbabcd, here we need minimum three characters to make it palindrome.

Input: str = "aa"
Output: 0
Explanation: "aa" is already a palindrome.

Expected Time Complexity: O(n2)
Expected Auxiliary Space: O(n2)

Constraints:
1 ≤ |str| ≤ 500
str contains only lowercase alphabets

*/



class Solution{
  public:
    int solveByDP(string &s, string &a, int i, int j, vector<vector<int>> &dp) {
        if(i >= s.size() || j >= a.size()) {
            return 0;
        }
        
        if(dp[i][j] != -1) return dp[i][j];
        
        int ans = 0;
        if(s[i] == a[j]) {
            ans = 1 + solveByDP(s, a, i + 1, j + 1, dp);
        }
        else {
            ans = 0 + max(solveByDP(s, a, i, j + 1, dp), solveByDP(s, a, i + 1, j, dp));
        }
        
        dp[i][j] = ans;
        return dp[i][j];
    }
    int solveByRec(string &s, string &a, int i, int j) {
        if(i >= s.size() || j >= a.size()) {
            return 0;
        }
        
        int ans = 0;
        if(s[i] == a[j]) {
            ans = 1 + solveByRec(s, a, i + 1, j + 1);
        }
        else {
            ans = 0 + max(solveByRec(s, a, i, j + 1), solveByRec(s, a, i + 1, j));
        }
        return ans;
    }
    
    int longestPalindromeSubseq(string &s) {
        string a = s;
        reverse(a.begin(), a.end());
        
        vector<vector<int>> dp(s.length() + 1, vector<int>(a.length() + 1, -1));
        
        // return solveByRec(s, a, 0, 0);
        return solveByDP(s, a, 0, 0, dp);
    }
    
    int countMin(string str){
        int len = longestPalindromeSubseq(str);
        
        int insertion = str.size() - len;
        
        return insertion;
       
    }
};